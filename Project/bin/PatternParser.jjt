options
{
  LOOKAHEAD= 1;
}

 
PARSER_BEGIN(PatternParser)

import java.io.FileInputStream;
import java.io.FileNotFoundException;
 
public class PatternParser
{
  public static void main(String [] args) throws ParseException,
  FileNotFoundException
  {
//    if (args.length < 1)
//    {
//      System.out.println("Write the filename of the pattern file.");
//      System.exit(1);
//    }
//    System.out.println("Reading from the file " + args[0]);
//    PatternParser patParser = new PatternParser(new FileInputStream(args[0]));


	PatternParser patParser = new PatternParser(System.in);
    SimpleNode root = PatternParser.Start();
    root.dump("");
  }
}

PARSER_END(PatternParser)

SKIP :
{
  	" "
	| "\r"
	| "\t"
	| "\n"
}

TOKEN :
{
  	< IF   : "if" >
	| < PARENTHESIS_OPEN  : "(" >
	| < PARENTHESIS_CLOSE : ")" >
	| < BRACKETS_OPEN	  : "{" >
	| < BRACKETS_CLOSE    : "}" >
	| < ELSE              : "else" >
	| < EQUALS			  : "==" >
	| < NOT_EQUALS		  : "|=" >
	| < INTEGER           : (["0"-"9"])+ >
	| < IDENTIFIER        : ([ "a"-"z", "A"-"Z" ]) ([ "a"-"z", "A"-"Z", "0"-"9" ])* >
	| < VARIABLE          : ("@" <IDENTIFIER> )>
	| < PATTERN      	  : "Pattern" >
 }

SimpleNode Start() : {}
{
	Pattern()*
	{
	  return jjThis;
	}
}

void Pattern(): { }
{
	< PATTERN > < IDENTIFIER > < BRACKETS_OPEN > Statement()* < BRACKETS_CLOSE >
}

void Statement() : { }
{
	IfStatement() | WhileStatement() | Assigment()
}

void IfStatement() : { }
{
	< IF > <PARENTHESIS_OPEN > Expression() < PARENTHESIS_CLOSE > Block()   
}

void Expression() : { }
{
	BinaryExpression() | UnaryExpression() | Assignment()
}

void UnaryExpression() : { }
{
  Op() Expression()
}

void Block() : { }
{
	< BRACKETS_OPEN > Expression()* < BRACKETS_CLOSE >
}

void Op() : { }
{
	< PLUS > | < MINUS > | < INCREMENT > | < DECREMENT > | < NEGATION >
}

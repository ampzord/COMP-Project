options
{
<<<<<<< HEAD
  LOOKAHEAD= 1;
  MULTI=true;
=======
	LOOKAHEAD = 1;
>>>>>>> d7b430e4a67ff1e90bd519c5fb73b659620188c2
}

PARSER_BEGIN(PatternParser)

import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class PatternParser
{
<<<<<<< HEAD
  public static void main(String [] args) throws ParseException,
  FileNotFoundException
  {
//    if (args.length < 1)
//    {
//      System.out.println("Write the filename of the pattern file.");
//      System.exit(1);
//    }
//    System.out.println("Reading from the file " + args[0]);
//    PatternParser patParser = new PatternParser(new FileInputStream(args[0]));


	PatternParser patParser = new PatternParser(System.in);
    ASTStart root = PatternParser.Start();
    // root.dump("");
    String code = root.generateJava();
    System.out.println(code);
  }
=======
	public static void main(String args[]) throws ParseException, FileNotFoundException{
	  
		PatternParser patparser = new PatternParser(System.in);
		//SimpleNode root = patparser.Expression();
		//^ devolve referencia para o no raiz da arvore

		SimpleNode root = PatternParser.Start();

		root.dump(""); //imprime no ecra a arvore
	}
>>>>>>> d7b430e4a67ff1e90bd519c5fb73b659620188c2
}

PARSER_END(PatternParser)

SKIP:
{
	" "
	| "\r"
	| "\t"
	| "\n"
}

<<<<<<< HEAD
TOKEN :
{
  	< IF   : "if" >
  	| < PATTERN      	  : "Pattern" >
	| < PARENTHESIS_OPEN  : "(" >
	| < PARENTHESIS_CLOSE : ")" >
	| < BRACKETS_OPEN	  : "{" >
	| < BRACKETS_CLOSE    : "}" >
	| < ELSE              : "else" >
	| < EQUALS			  : "==" >
	| < NOT_EQUALS		  : "|=" >
	| < INTEGER           : (["0"-"9"])+ >
	| < IDENTIFIER        : ([ "a"-"z", "A"-"Z" ]) ([ "a"-"z", "A"-"Z", "0"-"9" ])* >
	| < VARIABLE          : ("@" <IDENTIFIER> )>

 }

ASTStart Start() : {}
{
	(Pattern())/***/
	{
	  return jjtThis;
	}
=======
TOKEN:
{
	  < IF	: "if" >
	| < PARENTHESIS_OPEN      : "(" >
	| < PARENTHESIS_CLOSE     : ")" >
	| < BRACKETS_OPEN	      : " { " >
	| < BRACKETS_CLOSE	      : " }" >
	| < ELSE				  : "else" >
	| < EQUALS				  : "==" >
	| < NOT_EQUALS			  : "!=" >
	| < INTEGER				  : (["0"-"9"])+ >
	| < IDENTIFIER			  : (["a"-"z", "A"-"Z"]) (["a"-"z", "A"-"Z", "0"-"9"])* >
	| <  VARIABLE			  : ("@" < IDENTIFIER > ) >
	| < PATTERN				  : "Pattern" >

	| < WHILE				  : "while" > 
	| < PLUS 				  : "+" >
	| < MINUS				  : "-" >
	| < INCREMENT			  : "++" >
	| < DECREMENT			  : "--" >

}



SimpleNode Start() : { }
{
  	(Pattern())*
  	{
    	return jjtThis;
 	}
>>>>>>> d7b430e4a67ff1e90bd519c5fb73b659620188c2
}

void Pattern(): { Token t;}
{
<<<<<<< HEAD
  < PATTERN > t=< IDENTIFIER > { jjtThis.jjtSetValue(t.image); } Variable()
	//< PATTERN > < IDENTIFIER > < BRACKETS_OPEN > (Statement())* < BRACKETS_CLOSE >
=======
  < PATTERN > < IDENTIFIER > < BRACKETS_OPEN > (Statement())* < BRACKETS_CLOSE >
>>>>>>> d7b430e4a67ff1e90bd519c5fb73b659620188c2
}

void Variable(): { Token t; }
{
  t=< VARIABLE > { jjtThis.jjtSetValue(t.image); } 
}
/*
void Statement() : { }
{
<<<<<<< HEAD
	If_Statement() | While_Statement() | Assigment()
=======
	IfStatement() | WhileStatement() | Assignment()
>>>>>>> d7b430e4a67ff1e90bd519c5fb73b659620188c2
}

void If_Statement() : { }
{
	< IF > < PARENTHESIS_OPEN > Expression() < PARENTHESIS_CLOSE > Block()
}

void WhileStatement() : { }
{
	< WHILE > <PARENTHESIS_OPEN > Expression() < PARENTHESIS_CLOSE > Block()
}


void Assignment() : { }
{
	< VARIABLE > < EQUALS > < INTEGER >
}

void Expression() : { }
{
	BinaryExpression() | UnaryExpression() | Assignment()
}

void UnaryExpression() : { }
{
	Operand () Operator() //Expression()
}

void BinaryExpression() : { }
{
	Operand() Operator() Operand()
}

void Block() : { }
{
	< BRACKETS_OPEN > (Expression())* < BRACKETS_CLOSE >
}

void Operand(): { }
{
	< VARIABLE > 
}
<<<<<<< HEAD
*/
// --------------------------------------------------------------------------------

//void SimpleNode() {
//  String generateJava() {
//
//  }
//}
//
//void AST_Start() {
//	@override
//	String generateJava() {
//	  String s = "public class Pattern {";
//	  
//}
//
//
//void AST_Pattern() {
//	@override
//	String generateJava() {
//		
//	}
//}
=======

void Operator(): { }
{
	< PLUS > | < MINUS > | < INCREMENT > | < DECREMENT > | < NOT_EQUALS > //< NEGATION >
}
>>>>>>> d7b430e4a67ff1e90bd519c5fb73b659620188c2

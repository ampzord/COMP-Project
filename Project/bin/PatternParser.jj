/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. PatternParser.jj */
/*@egen*/options
{
<<<<<<< HEAD
  LOOKAHEAD= 1;
             
=======
	LOOKAHEAD = 1;
>>>>>>> d7b430e4a67ff1e90bd519c5fb73b659620188c2
}

PARSER_BEGIN(PatternParser)

import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class PatternParser/*@bgen(jjtree)*/implements PatternParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTPatternParserState jjtree = new JJTPatternParserState();

/*@egen*/
	public static void main(String args[]) throws ParseException, FileNotFoundException{
	  
		PatternParser patparser = new PatternParser(System.in);
		//SimpleNode root = patparser.Expression();
		//^ devolve referencia para o no raiz da arvore

		SimpleNode root = PatternParser.Start();

<<<<<<< HEAD
	PatternParser patParser = new PatternParser(System.in);
    ASTStart root = PatternParser.Start();
    // root.dump("");
    String code = root.generateJava();
    System.out.println(code);
  }
=======
		root.dump(""); //imprime no ecra a arvore
	}
>>>>>>> d7b430e4a67ff1e90bd519c5fb73b659620188c2
}

PARSER_END(PatternParser)

SKIP:
{
	" "
	| "\r"
	| "\t"
	| "\n"
}

TOKEN:
{
<<<<<<< HEAD
  	< IF   : "if" >
  	| < PATTERN      	  : "Pattern" >
	| < PARENTHESIS_OPEN  : "(" >
	| < PARENTHESIS_CLOSE : ")" >
	| < BRACKETS_OPEN	  : "{" >
	| < BRACKETS_CLOSE    : "}" >
	| < ELSE              : "else" >
	| < EQUALS			  : "==" >
	| < NOT_EQUALS		  : "|=" >
	| < INTEGER           : (["0"-"9"])+ >
	| < IDENTIFIER        : ([ "a"-"z", "A"-"Z" ]) ([ "a"-"z", "A"-"Z", "0"-"9" ])* >
	| < VARIABLE          : ("@" <IDENTIFIER> )>

 }

ASTStart Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	(Pattern())/*@bgen(jjtree)*/
=======
	  < IF	: "if" >
	| < PARENTHESIS_OPEN      : "(" >
	| < PARENTHESIS_CLOSE     : ")" >
	| < BRACKETS_OPEN	      : " { " >
	| < BRACKETS_CLOSE	      : " }" >
	| < ELSE				  : "else" >
	| < EQUALS				  : "==" >
	| < NOT_EQUALS			  : "!=" >
	| < INTEGER				  : (["0"-"9"])+ >
	| < IDENTIFIER			  : (["a"-"z", "A"-"Z"]) (["a"-"z", "A"-"Z", "0"-"9"])* >
	| <  VARIABLE			  : ("@" < IDENTIFIER > ) >
	| < PATTERN				  : "Pattern" >

	| < WHILE				  : "while" > 
	| < PLUS 				  : "+" >
	| < MINUS				  : "-" >
	| < INCREMENT			  : "++" >
	| < DECREMENT			  : "--" >

}



SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
  	(Pattern())*/*@bgen(jjtree)*/
>>>>>>> d7b430e4a67ff1e90bd519c5fb73b659620188c2
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
<<<<<<< HEAD
/*@egen*//***/
	{
	  return jjtn000;
	}/*@bgen(jjtree)*/
=======
/*@egen*/
  	{
    	return jjtn000;
 	}/*@bgen(jjtree)*/
>>>>>>> d7b430e4a67ff1e90bd519c5fb73b659620188c2
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
<<<<<<< HEAD
/*@egen*/
}

void Pattern(): {/*@bgen(jjtree) Pattern */
                  ASTPattern jjtn000 = new ASTPattern(JJTPATTERN);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Pattern */
  try {
/*@egen*/
  < PATTERN > t=< IDENTIFIER > { jjtn000.jjtSetValue(t.image); } Variable()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
	//< PATTERN > < IDENTIFIER > < BRACKETS_OPEN > (Statement())* < BRACKETS_CLOSE >
}

void Variable(): {/*@bgen(jjtree) Variable */
                   ASTVariable jjtn000 = new ASTVariable(JJTVARIABLE);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Variable */
  try {
=======
>>>>>>> d7b430e4a67ff1e90bd519c5fb73b659620188c2
/*@egen*/
  t=< VARIABLE >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.jjtSetValue(t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}
/*
void Statement() : { }
{
	If_Statement() | While_Statement() | Assigment()
}

void If_Statement() : { }
{
	< IF > <PARENTHESIS_OPEN > Expression() < PARENTHESIS_CLOSE > Block()   
}

<<<<<<< HEAD
void Expression() : { }
{
	BinaryExpression() | UnaryExpression() | Assignment()
}

void UnaryExpression() : { }
{
  Op() Expression()
}

void Block() : { }
{
	< BRACKETS_OPEN > (Expression())* < BRACKETS_CLOSE >
}

void Op() : { }
{
	< PLUS > | < MINUS > | < INCREMENT > | < DECREMENT > | < NEGATION >
}
*/
// --------------------------------------------------------------------------------

//void SimpleNode() {
//  String generateJava() {
//
//  }
//}
//
//void AST_Start() {
//	@override
//	String generateJava() {
//	  String s = "public class Pattern {";
//	  
//}
//
//
//void AST_Pattern() {
//	@override
//	String generateJava() {
//		
//	}
//}
=======
void Pattern(): {/*@bgen(jjtree) Pattern */
  SimpleNode jjtn000 = new SimpleNode(JJTPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Pattern */
  try {
/*@egen*/
  < PATTERN > < IDENTIFIER > < BRACKETS_OPEN > (Statement())* < BRACKETS_CLOSE >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Statement() : {/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Statement */
        try {
/*@egen*/
	IfStatement() | WhileStatement() | Assignment()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void IfStatement() : {/*@bgen(jjtree) IfStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) IfStatement */
        try {
/*@egen*/
	< IF > < PARENTHESIS_OPEN > Expression() < PARENTHESIS_CLOSE > Block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void WhileStatement() : {/*@bgen(jjtree) WhileStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) WhileStatement */
        try {
/*@egen*/
	< WHILE > <PARENTHESIS_OPEN > Expression() < PARENTHESIS_CLOSE > Block()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Assignment() : {/*@bgen(jjtree) Assignment */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Assignment */
        try {
/*@egen*/
	< VARIABLE > < EQUALS > < INTEGER >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expression() : {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	BinaryExpression() | UnaryExpression() | Assignment()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void UnaryExpression() : {/*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) UnaryExpression */
        try {
/*@egen*/
	Operand () Operator()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ //Expression()
}

void BinaryExpression() : {/*@bgen(jjtree) BinaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTBINARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) BinaryExpression */
        try {
/*@egen*/
	Operand() Operator() Operand()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Block() : {/*@bgen(jjtree) Block */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Block */
        try {
/*@egen*/
	< BRACKETS_OPEN > (Expression())* < BRACKETS_CLOSE >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Operand(): {/*@bgen(jjtree) Operand */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Operand */
        try {
/*@egen*/
	< VARIABLE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void Operator(): {/*@bgen(jjtree) Operator */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Operator */
        try {
/*@egen*/
	< PLUS > | < MINUS > | < INCREMENT > | < DECREMENT > | < NOT_EQUALS >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ //< NEGATION >
}
>>>>>>> d7b430e4a67ff1e90bd519c5fb73b659620188c2

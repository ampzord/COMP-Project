/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. PatternParser.jj */
/*@egen*/options
{
  LOOKAHEAD= 1;
}

 
PARSER_BEGIN(PatternParser)

import java.io.FileInputStream;
import java.io.FileNotFoundException;
 
public class PatternParser/*@bgen(jjtree)*/implements PatternParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTPatternParserState jjtree = new JJTPatternParserState();

/*@egen*/
  public static void main(String [] args) throws ParseException,
  FileNotFoundException
  {
//    if (args.length < 1)
//    {
//      System.out.println("Write the filename of the pattern file.");
//      System.exit(1);
//    }
//    System.out.println("Reading from the file " + args[0]);
//    PatternParser patParser = new PatternParser(new FileInputStream(args[0]));


	PatternParser patParser = new PatternParser(System.in);
    SimpleNode root = PatternParser.IF_Expression();
    root.dump("");
  }
}

PARSER_END(PatternParser)

SKIP :
{
  	" "
	| "\r"
	| "\t"
	| "\n"
}

TOKEN :
{
  	< IF   : "if" >
	| < PARENTHESIS_OPEN  : "(" >
	| < PARENTHESIS_CLOSE : ")" >
	| < BRACKETS_OPEN	  : "{" >
	| < BRACKETS_CLOSE    : "}" >
	| < ELSE              : "else" >
	| < EQUALS			  : "==" >
	| < NOT_EQUALS		  : "|=" >
	| < INTEGER           : (["0"-"9"])+ >
	| < IDENTIFIER        : ([ "a"-"z", "A"-"Z" ]) ([ "a"-"z", "A"-"Z", "0"-"9" ])* >
	| < VARIABLE          : ("@" <IDENTIFIER> )>  
 }

SimpleNode IF_Expression() : {/*@bgen(jjtree) IF_Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTIF_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IF_Expression */
   try {
/*@egen*/
   < IF >/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   { return jjtn000; }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

//void Expr1() : {}
//{
//}

options
{
  LOOKAHEAD= 1;
  MULTI=true;
}
 
PARSER_BEGIN(PatternParser)

import java.io.FileInputStream;
import java.io.FileNotFoundException;
 
public class PatternParser
{
  public static void main(String [] args) throws ParseException,
  FileNotFoundException
  {
    if (args.length < 1)
    {
      System.out.println("Write the filename of the pattern file.");
      System.exit(1);
    }
    //System.out.println("Reading from the file " + args[0] + "...\n");
    PatternParser patParser = new PatternParser(new FileInputStream(args[0]));

    ASTStart root = PatternParser.Start();
    // root.dump("");
    String code = root.generateJava();
    System.out.println(code);
  }
}

PARSER_END(PatternParser)

SKIP :
{
  	" "
	| "\r"
	| "\t"
	| "\n"
}

TOKEN :
{
  	  < IF   : "if" >
  	| < PATTERN      	  : "Pattern" >
    | < WHILE             : "while" >
	| < PARENTHESIS_OPEN  : "(" >
	| < PARENTHESIS_CLOSE : ")" >
	| < BRACKETS_OPEN	  : "{" >
	| < BRACKETS_CLOSE    : "}" >
	| < ELSE              : "else" >
	| < EQUALS			  : "==" >
	| < NOT_EQUALS		  : "!=" >
	| < PLUS              : "+" >
    | < MINUS             : "-" >
    | < INCREMENT         : "++" >
    | < DECREMENT         : "--" >
    | < GREATER_EQUAL	  : ">=" >
    | < GREATER		      : ">" >
    | < LESSER_EQUAL      : "<=" >
    | < LESSER			  : "<" >
	| < INTEGER           : (["0"-"9"])+ >
	| < IDENTIFIER        : ([ "a"-"z", "A"-"Z" ]) ([ "a"-"z", "A"-"Z", "0"-"9" ])* >
	| < VARIABLE          : ("@" <IDENTIFIER> )>
 }

ASTStart Start() : {}
{
	(Pattern())*
	< EOF >
	{
	  return jjtThis;
	}
}

void Pattern(): { Token t;}
{
  	< PATTERN > t=< IDENTIFIER > { jjtThis.jjtSetValue(t.image); } Block()
}

void Assignment() : { }
{
    < VARIABLE > < EQUALS > < INTEGER >
}

void Statement() #void : { }
{
	IfStatement() | WhileStatement() | Assignment()
}

void IfStatement() : { }
{
	< IF > <PARENTHESIS_OPEN > Expression() < PARENTHESIS_CLOSE > Block()  [<ELSE > Block()]
}

void WhileStatement() : { }
{
    < WHILE > <PARENTHESIS_OPEN > Expression() < PARENTHESIS_CLOSE > Block()
}

void Expression() #void: { }
{
    LOOKAHEAD(BinaryExpression()) BinaryExpression() |  LOOKAHEAD(UnaryExpression()) UnaryExpression() | Operand()
}
 
void UnaryExpression() : { } //DO BETTER STRUCTURE, check my book later to fix this
{
    Operand() Operator()
}
 
void BinaryExpression() : { }
{
    Operand() Operator() Operand()
}

void Block() : { }
{
	< BRACKETS_OPEN > (Statement())* < BRACKETS_CLOSE >
}

void Operand(): { Token t;}
{
    (      t=< VARIABLE > | t=< IDENTIFIER > | t=< INTEGER >
    )
      { jjtThis.jjtSetValue(t.image); }
}
 
void Operator(): { }
{
    < PLUS > | < MINUS > | < INCREMENT > | < DECREMENT > | < NOT_EQUALS > | < EQUALS >
  | < GREATER > |< GREATER_EQUAL > | <LESSER > | < LESSER_EQUAL > 
}

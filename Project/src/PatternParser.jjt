options
{
  LOOKAHEAD= 1;
  MULTI=true;
}

 
PARSER_BEGIN(PatternParser)

import java.io.FileInputStream;
import java.io.FileNotFoundException;
 
public class PatternParser
{
  public static void main(String [] args) throws ParseException,
  FileNotFoundException
  {
//    if (args.length < 1)
//    {
//      System.out.println("Write the filename of the pattern file.");
//      System.exit(1);
//    }
//    System.out.println("Reading from the file " + args[0]);
//    PatternParser patParser = new PatternParser(new FileInputStream(args[0]));


	PatternParser patParser = new PatternParser(System.in);
    ASTStart root = PatternParser.Start();
    // root.dump("");
    String code = root.generateJava();
    System.out.println(code);
  }
}

PARSER_END(PatternParser)

SKIP :
{
  	" "
	| "\r"
	| "\t"
	| "\n"
}

TOKEN :
{
  	  < IF   : "if" >
  	| < PATTERN      	  : "Pattern" >
	| < PARENTHESIS_OPEN  : "(" >
	| < PARENTHESIS_CLOSE : ")" >
	| < BRACKETS_OPEN	  : "{" >
	| < BRACKETS_CLOSE    : "}" >
	| < ELSE              : "else" >
	| < EQUALS			  : "==" >
	| < NOT_EQUALS		  : "!=" >
	| < INTEGER           : (["0"-"9"])+ >
	| < IDENTIFIER        : ([ "a"-"z", "A"-"Z" ]) ([ "a"-"z", "A"-"Z", "0"-"9" ])* >
	| < VARIABLE          : ("@" <IDENTIFIER> )>

    | < WHILE                 : "while" >
    | < PLUS                  : "+" >
    | < MINUS                 : "-" >
    | < INCREMENT             : "++" >
    | < DECREMENT             : "--" >
	

 }

ASTStart Start() : {}
{
	(Pattern())/***/
	{
	  return jjtThis;
	}
}

void Pattern(): { Token t;}
{
  < PATTERN > t=< IDENTIFIER > { jjtThis.jjtSetValue(t.image); } Variable()
	//< PATTERN > < IDENTIFIER > < BRACKETS_OPEN > (Statement())* < BRACKETS_CLOSE >
}

void Variable(): { Token t; }
{
  t=< VARIABLE > { jjtThis.jjtSetValue(t.image); } 
}


void Assignment() : { }
{
    < VARIABLE > < EQUALS > < INTEGER >
}

void Statement() : { }
{
	If_Statement() | While_Statement() | Assignment()
}

void If_Statement() : { }
{
	< IF > <PARENTHESIS_OPEN > Expression() < PARENTHESIS_CLOSE > Block()   
}

void While_Statement() : { }
{
    < WHILE > <PARENTHESIS_OPEN > Expression() < PARENTHESIS_CLOSE > Block()
}

void Expression() : { }
{
    BinaryExpression() | UnaryExpression() | Assignment()
}
 
void UnaryExpression() : { }
{
    Operand() Operator() //Expression()
}
 
void BinaryExpression() : { }
{
    Operand() Operator() Operand()
}

void Block() : { }
{
	< BRACKETS_OPEN > (Expression())* < BRACKETS_CLOSE >
}

void Operand(): { }
{
    < VARIABLE >
}
 
void Operator(): { }
{
    < PLUS > | < MINUS > | < INCREMENT > | < DECREMENT > | < NOT_EQUALS >
}
